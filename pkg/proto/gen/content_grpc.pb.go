// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: content.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Contents_Save_FullMethodName      = "/gophkeeper.Contents/Save"
	Contents_Delete_FullMethodName    = "/gophkeeper.Contents/Delete"
	Contents_Update_FullMethodName    = "/gophkeeper.Contents/Update"
	Contents_GetByType_FullMethodName = "/gophkeeper.Contents/GetByType"
	Contents_Get_FullMethodName       = "/gophkeeper.Contents/Get"
	Contents_SaveFile_FullMethodName  = "/gophkeeper.Contents/SaveFile"
	Contents_GetFile_FullMethodName   = "/gophkeeper.Contents/GetFile"
)

// ContentsClient is the client API for Contents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentsClient interface {
	Save(ctx context.Context, in *Content, opts ...grpc.CallOption) (*ContentId, error)
	Delete(ctx context.Context, in *ContentId, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *Content, opts ...grpc.CallOption) (*Empty, error)
	GetByType(ctx context.Context, in *Query, opts ...grpc.CallOption) (Contents_GetByTypeClient, error)
	Get(ctx context.Context, in *ContentId, opts ...grpc.CallOption) (*Content, error)
	SaveFile(ctx context.Context, opts ...grpc.CallOption) (Contents_SaveFileClient, error)
	GetFile(ctx context.Context, in *ContentId, opts ...grpc.CallOption) (Contents_GetFileClient, error)
}

type contentsClient struct {
	cc grpc.ClientConnInterface
}

func NewContentsClient(cc grpc.ClientConnInterface) ContentsClient {
	return &contentsClient{cc}
}

func (c *contentsClient) Save(ctx context.Context, in *Content, opts ...grpc.CallOption) (*ContentId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContentId)
	err := c.cc.Invoke(ctx, Contents_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentsClient) Delete(ctx context.Context, in *ContentId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Contents_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentsClient) Update(ctx context.Context, in *Content, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Contents_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentsClient) GetByType(ctx context.Context, in *Query, opts ...grpc.CallOption) (Contents_GetByTypeClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Contents_ServiceDesc.Streams[0], Contents_GetByType_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &contentsGetByTypeClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Contents_GetByTypeClient interface {
	Recv() (*Content, error)
	grpc.ClientStream
}

type contentsGetByTypeClient struct {
	grpc.ClientStream
}

func (x *contentsGetByTypeClient) Recv() (*Content, error) {
	m := new(Content)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentsClient) Get(ctx context.Context, in *ContentId, opts ...grpc.CallOption) (*Content, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Content)
	err := c.cc.Invoke(ctx, Contents_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentsClient) SaveFile(ctx context.Context, opts ...grpc.CallOption) (Contents_SaveFileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Contents_ServiceDesc.Streams[1], Contents_SaveFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &contentsSaveFileClient{ClientStream: stream}
	return x, nil
}

type Contents_SaveFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*ContentId, error)
	grpc.ClientStream
}

type contentsSaveFileClient struct {
	grpc.ClientStream
}

func (x *contentsSaveFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contentsSaveFileClient) CloseAndRecv() (*ContentId, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ContentId)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentsClient) GetFile(ctx context.Context, in *ContentId, opts ...grpc.CallOption) (Contents_GetFileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Contents_ServiceDesc.Streams[2], Contents_GetFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &contentsGetFileClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Contents_GetFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type contentsGetFileClient struct {
	grpc.ClientStream
}

func (x *contentsGetFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContentsServer is the server API for Contents service.
// All implementations must embed UnimplementedContentsServer
// for forward compatibility
type ContentsServer interface {
	Save(context.Context, *Content) (*ContentId, error)
	Delete(context.Context, *ContentId) (*Empty, error)
	Update(context.Context, *Content) (*Empty, error)
	GetByType(*Query, Contents_GetByTypeServer) error
	Get(context.Context, *ContentId) (*Content, error)
	SaveFile(Contents_SaveFileServer) error
	GetFile(*ContentId, Contents_GetFileServer) error
	mustEmbedUnimplementedContentsServer()
}

// UnimplementedContentsServer must be embedded to have forward compatible implementations.
type UnimplementedContentsServer struct {
}

func (UnimplementedContentsServer) Save(context.Context, *Content) (*ContentId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedContentsServer) Delete(context.Context, *ContentId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedContentsServer) Update(context.Context, *Content) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedContentsServer) GetByType(*Query, Contents_GetByTypeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetByType not implemented")
}
func (UnimplementedContentsServer) Get(context.Context, *ContentId) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedContentsServer) SaveFile(Contents_SaveFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveFile not implemented")
}
func (UnimplementedContentsServer) GetFile(*ContentId, Contents_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedContentsServer) mustEmbedUnimplementedContentsServer() {}

// UnsafeContentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentsServer will
// result in compilation errors.
type UnsafeContentsServer interface {
	mustEmbedUnimplementedContentsServer()
}

func RegisterContentsServer(s grpc.ServiceRegistrar, srv ContentsServer) {
	s.RegisterService(&Contents_ServiceDesc, srv)
}

func _Contents_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentsServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contents_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentsServer).Save(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contents_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contents_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentsServer).Delete(ctx, req.(*ContentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contents_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contents_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentsServer).Update(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contents_GetByType_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContentsServer).GetByType(m, &contentsGetByTypeServer{ServerStream: stream})
}

type Contents_GetByTypeServer interface {
	Send(*Content) error
	grpc.ServerStream
}

type contentsGetByTypeServer struct {
	grpc.ServerStream
}

func (x *contentsGetByTypeServer) Send(m *Content) error {
	return x.ServerStream.SendMsg(m)
}

func _Contents_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contents_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentsServer).Get(ctx, req.(*ContentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contents_SaveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContentsServer).SaveFile(&contentsSaveFileServer{ServerStream: stream})
}

type Contents_SaveFileServer interface {
	SendAndClose(*ContentId) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type contentsSaveFileServer struct {
	grpc.ServerStream
}

func (x *contentsSaveFileServer) SendAndClose(m *ContentId) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contentsSaveFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Contents_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContentId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContentsServer).GetFile(m, &contentsGetFileServer{ServerStream: stream})
}

type Contents_GetFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type contentsGetFileServer struct {
	grpc.ServerStream
}

func (x *contentsGetFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// Contents_ServiceDesc is the grpc.ServiceDesc for Contents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Contents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.Contents",
	HandlerType: (*ContentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _Contents_Save_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Contents_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Contents_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Contents_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetByType",
			Handler:       _Contents_GetByType_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveFile",
			Handler:       _Contents_SaveFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _Contents_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "content.proto",
}
